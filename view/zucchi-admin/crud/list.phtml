<?php
    $this->inlineScript()->appendScript('
    (function($j) {
        $j(document).ready(function(){
            $j("#filter-add").bind("click", function(e) {
                var field = $j("#filter-select").val();
                var query = window.location.search.substring(1);
                if (query.length) {
                    query += "&";
                }
                var straightRegex = new RegExp("where\\\[" + field  + "\\\]","gi");
                var encodedRegex = new RegExp("where%5B" + field + "%5D", "gi");
                if (!query.match(straightRegex) && !query.match(encodedRegex)) {
                    location.href = "?" + query + "where[" + field  + "]";
                }
            });
            $j(".filter-remove").bind("click", function(e) {
                $j(this).parent(".control-group").remove();
                $j("#filter-form").submit();
            });
            $j(".filter-remove").bind("click", function(e) {
                $j(this).parent(".control-group").remove();
                $j("#filter-form").submit();
            });
    
            $j(".query-type").bind("change", function(e){
                var prev = $j(".query-type").data("previous");
                if (this.value == "between" && prev != "between") {
                    // add additional field
                    var input = $(this).next("input");
                    var newInput = $j(input).clone();
                    $j(input).attr("name", $j(input).attr("name") + "[]")
                             .removeClass("input-large")
                             .addClass("input-medium");
                    $j(newInput).attr("name", $j(input).attr("name"))
                                .removeClass("input-large")
                                .addClass("input-medium");
                    $j(input).after(newInput);
                } else if (this.value != "between" && (prev == "between" || prev == undefined)) {
                    // remove additional field
                    var input = $(this).next("input");
                    $j(input).next("input").remove();
                    $j(input).removeClass("input-medium")
                             .addClass("input-large")
                             .attr("name", $j(input).attr("name").replace(/\[\]$/, ""));
                    
                }
                // now set the previous data
                $j(".query-type").data("previous", $(this).val());
            });
    
            $j("#bulk-all").bind("change", function(e){
                if ($j(this).attr("checked") == "checked") {
                    $j(".bulk-action").attr("checked", "checked");
                } else {
                    $j(".bulk-action").attr("checked", false);
                }
            });
    
            $j("#bulk-actions select").bind("change", function(e){
            	var value = this.value;
                var ids = [];
                var baseUri = "' . $this->url(null, array('action' => null)) . '" 
                $j(".bulk-action:checked").each(function(i) {
                    ids.push("id[]=" + $j(this).val());
                });
                if (ids.length && confirm("' . $this->translate('Are you sure you want to perform the action') .'\"" + value + "\"' . $this->translate('on the selected items') . '")) {
                    // redirect as required
                    location.href = baseUri + "/" + value + "?" + ids.join("&") + "&confirmed=" + value;
                }
                $j(this).val("");
            });
        
            $j(".action-delete").bind("click", function(e){
                if (confirm("' . $this->translate('Are you sure you want to delete this item') . '")) {
                    $j(this).attr("href", $j(this).attr("href") + "&confirmed=delete");
                    return true;
                } 
                return false;
            });
        })
    })(jQuery);
    ');
?>
<header><?=sprintf($this->translate('List %1$s'), $label)?></header>
<div class="gutter">
    <div id="filters" class="row-fluid">
        <form method="get" id="filter-form" class="span9 well form-inline">
            <button type="submit" class="btn btn-primary pull-right">Search</button>
            <?php foreach($where as $field => $filter):?>
            <?=$this->crudFilterFormRow($field, $filter, $metadata)?>
            <?php endforeach; ?>
        </form>
        <div class="span3 well form-inline">
            <select class="input-medium" id="filter-select">
                <?php foreach ($metadata->getFieldNames() AS $field): ?>
                <option value="<?=$field?>"><?=ucfirst($this->filter($field, 'wordcamelcasetoseparator'))?></option>
                <?php endforeach; ?>
            </select>
            <button type="button" class="btn btn-info input-mini" id="filter-add">Add</button>
        </div>

    </div>
    <div class="row-fluid">
        <div class="span9">
            <table class="table table-striped">
                <?php if ($listFields):?>
                <thead>
                    <tr>
                        <?php foreach ($listFields AS $field => $label): ?>
                        <th>
                            <?=$label?> 
                            <?=$this->crudListSorter($field, $label);?>
                        </th>
                        <?php endforeach; ?>
                        <th>
                            <input class="pull-right" type="checkbox" id="bulk-all" />
                            <?=$this->crudActionIcon('create', 'module:ZucchiUser', 'icon-plus')?>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach($list AS $item):?>
                    <tr>
                        <?php foreach ($listFields AS $field => $label): ?>
                        <td><?=$this->entityField($item, $field, $metadata);?></td>
                        <?php endforeach; ?>
                        <td>
                            <?=$this->crudBulkCheckbox($item)?>
                            <?=$this->crudActionIcon('delete', 'module:ZucchiUser', 'icon-remove', $item)?>
                            <?=$this->crudActionIcon('update', 'module:ZucchiUser', 'icon-pencil', $item )?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                    
                </tbody>
                <?php endif; ?>
            </table>
        </div>
        <div class="span3">
            <div class="well">
                <?=$this->crudBulkActions('module:ZucchiUser')?>
            </div>
            <?php if ($pages > 1): ?>
            <div class="well pagination-container">
                <div class="pagination">
                    <ul>
                        <li class="<?=($page == 1) ? 'disabled':null;?>"><a href="?page=1&<?=$currentQuery?>">&laquo;</a></li>
                        <li class="<?=($page == 1) ? 'disabled':null;?>"><a href="?page=<?=($page>1)? $page-1:1?>&<?=$currentQuery?>">&lt;</a></li>
                        <li class="disabled"><span><?=$page?> of <?=$pages?></span></li>
                        <li class="<?=($page == $pages) ? 'disabled':null;?>"><a href="?page=<?=($page<$pages)? $page+1:$pages?>&<?=$currentQuery?>">&gt;</a></li>
                        <li class="<?=($page == $pages) ? 'disabled':null;?>"><a href="?page=<?=$pages?>&<?=$currentQuery?>">&raquo;</a></li>
                    </ul>
                </div>
                <form class="form-inline" method="get">
                    <label>Jump to page:</label><input type="text" class="input-small" name="page" placeholder="page #" value="<?=$page?>"/>
                    <?php foreach (explode('&', $currentQuery) as $part): ?>
                        <?php list($key, $value) = explode('=',$part);?>
                        <input type='hidden' name='<?=urldecode($key)?>' value='<?=$value?>'/>
                    <?php endforeach;?>
                </form>
            </div>
            <?php endif;?>
        </div>
    </div>
</div>
